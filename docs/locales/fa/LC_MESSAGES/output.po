# Copyright (C) Weimin Wang
# This file is distributed under the same license as the PyWebIO package.
#
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
# Pikhosh <pikhosh@gmail.com>, 2022.
msgid ""
msgstr ""
"Project-Id-Version: PyWebIO 1.5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-26 16:35+0330\n"
"PO-Revision-Date: 2022-02-28 14:30+0330\n"
"Last-Translator: Pikhosh <pikhosh@gmail.com>\n"
"Language-Team: Persian <>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Language: fa\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Lokalize 21.12.2\n"

#: ../../output.rst:2
msgid "``pywebio.output`` --- Make output to web browser"
msgstr "``pywebio.output`` --- ایجاد خروجی به مرورگر وب"

#: of pywebio.output:1
msgid ""
"This module provides functions to output all kinds of content to the "
"user's browser, and supply flexible output control."
msgstr ""

#: of pywebio.output:8
msgid "Functions list"
msgstr "لیست توابع"

#: of pywebio.output:12
msgid ""
"The following table shows the output-related functions provided by "
"PyWebIO."
msgstr ""

#: of pywebio.output:13
msgid ""
"The functions marked with ``*`` indicate that they accept ``put_xxx`` "
"calls as arguments."
msgstr ""

#: of pywebio.output:14
msgid ""
"The functions marked with ``†`` indicate that they can use as context "
"manager."
msgstr ""

#: of pywebio.output:17
msgid "**Name**"
msgstr ""

#: of pywebio.output:17
msgid "**Description**"
msgstr ""

#: of pywebio.output:19 pywebio.output:87
msgid "Output Scope"
msgstr "محدوده خروجی"

#: of pywebio.output:19
msgid "`put_scope`"
msgstr ""

#: of pywebio.output:19
msgid "Create a new scope"
msgstr ""

#: of pywebio.output:21
msgid "`use_scope`:sup:`†`"
msgstr ""

#: of pywebio.output:21
msgid "Enter a scope"
msgstr ""

#: of pywebio.output:23
msgid "`get_scope`"
msgstr ""

#: of pywebio.output:23
msgid "Get the current scope name in the runtime scope stack"
msgstr ""

#: of pywebio.output:25
msgid "`clear`"
msgstr ""

#: of pywebio.output:25
msgid "Clear the content of scope"
msgstr ""

#: of pywebio.output:27
msgid "`remove`"
msgstr ""

#: of pywebio.output:27
msgid "Remove the scope"
msgstr ""

#: of pywebio.output:29
msgid "`scroll_to`"
msgstr ""

#: of pywebio.output:29
msgid "Scroll the page to the scope"
msgstr ""

#: of pywebio.output:31 pywebio.output:101
msgid "Content Outputting"
msgstr "خروجی دادن محتوا"

#: of pywebio.output:31
msgid "`put_text`"
msgstr ""

#: of pywebio.output:31 pywebio.output.put_text:1
msgid "Output plain text"
msgstr ""

#: of pywebio.output:33
msgid "`put_markdown`"
msgstr ""

#: of pywebio.output:33 pywebio.output.put_markdown:1
msgid "Output Markdown"
msgstr ""

#: of pywebio.output
msgid "`put_info`:sup:`*†`"
msgstr ""

#: of pywebio.output
msgid "`put_success`:sup:`*†`"
msgstr ""

#: of pywebio.output
msgid "`put_warning`:sup:`*†`"
msgstr ""

#: of pywebio.output
msgid "`put_error`:sup:`*†`"
msgstr ""

#: of pywebio.output:35 pywebio.output:164
msgid "Output Messages."
msgstr ""

#: of pywebio.output:40
msgid "`put_html`"
msgstr ""

#: of pywebio.output:40
msgid "Output html"
msgstr ""

#: of pywebio.output:42
msgid "`put_link`"
msgstr ""

#: of pywebio.output:42
msgid "Output link"
msgstr ""

#: of pywebio.output:44
msgid "`put_processbar`"
msgstr ""

#: of pywebio.output:44 pywebio.output.put_processbar:1
msgid "Output a process bar"
msgstr ""

#: of pywebio.output:46
msgid "`put_loading`:sup:`†`"
msgstr ""

#: of pywebio.output:46 pywebio.output.put_loading:1
msgid "Output loading prompt"
msgstr ""

#: of pywebio.output:48
msgid "`put_code`"
msgstr ""

#: of pywebio.output:48 pywebio.output.put_code:1
msgid "Output code block"
msgstr ""

#: of pywebio.output:50
msgid "`put_table`:sup:`*`"
msgstr ""

#: of pywebio.output:50 pywebio.output.put_table:1
msgid "Output table"
msgstr ""

#: of pywebio.output
msgid "`put_button`"
msgstr ""

#: of pywebio.output
msgid "`put_buttons`"
msgstr ""

#: of pywebio.output:52
msgid "Output button and bind click event"
msgstr ""

#: of pywebio.output:55
msgid "`put_image`"
msgstr ""

#: of pywebio.output:55 pywebio.output.put_image:1
msgid "Output image"
msgstr ""

#: of pywebio.output:57
msgid "`put_file`"
msgstr ""

#: of pywebio.output:57 pywebio.output.put_file:1
msgid "Output a link to download a file"
msgstr ""

#: of pywebio.output:59
msgid "`put_tabs`:sup:`*`"
msgstr ""

#: of pywebio.output:59
msgid "Output tabs"
msgstr ""

#: of pywebio.output:61
msgid "`put_collapse`:sup:`*†`"
msgstr ""

#: of pywebio.output:61 pywebio.output.put_collapse:1
msgid "Output collapsible content"
msgstr ""

#: of pywebio.output:63
msgid "`put_scrollable`:sup:`*†`"
msgstr ""

#: of pywebio.output
msgid "Output a fixed height content area,"
msgstr ""

#: of pywebio.output
msgid "scroll bar is displayed when the content"
msgstr ""

#: of pywebio.output
msgid "exceeds the limit"
msgstr ""

#: of pywebio.output:67
msgid "`put_widget`:sup:`*`"
msgstr ""

#: of pywebio.output:67 pywebio.output.put_widget:1
msgid "Output your own widget"
msgstr ""

#: of pywebio.output:69 pywebio.output:191
msgid "Other Interactions"
msgstr "تعاملات دیگر"

#: of pywebio.output:69
msgid "`toast`"
msgstr ""

#: of pywebio.output:69
msgid "Show a notification message"
msgstr ""

#: of pywebio.output:71
msgid "`popup`:sup:`*†`"
msgstr ""

#: of pywebio.output:71
msgid "Show popup"
msgstr ""

#: of pywebio.output:73
msgid "`close_popup`"
msgstr ""

#: of pywebio.output:73 pywebio.output.close_popup:1
msgid "Close the current popup window."
msgstr ""

#: of pywebio.output:75 pywebio.output:199
msgid "Layout and Style"
msgstr "چیدمان و استایل"

#: of pywebio.output:75
msgid "`put_row`:sup:`*†`"
msgstr ""

#: of pywebio.output:75
msgid "Use row layout to output content"
msgstr ""

#: of pywebio.output:77
msgid "`put_column`:sup:`*†`"
msgstr ""

#: of pywebio.output:77
msgid "Use column layout to output content"
msgstr ""

#: of pywebio.output:79
msgid "`put_grid`:sup:`*`"
msgstr ""

#: of pywebio.output:79 pywebio.output.put_grid:1
msgid "Output content using grid layout"
msgstr ""

#: of pywebio.output:81
msgid "`span`"
msgstr ""

#: of pywebio.output:81
msgid "Cross-cell content"
msgstr ""

#: of pywebio.output:83
msgid "`style`:sup:`*`"
msgstr ""

#: of pywebio.output:83 pywebio.output.style:1
msgid "Customize the css style of output content"
msgstr ""

#: of pywebio.output:91
msgid ":ref:`Use Guide: Output Scope <output_scope>`"
msgstr ""

#: of pywebio.output.put_scope:1
msgid "Output a scope"
msgstr ""

#: of pywebio.output pywebio.output.clear pywebio.output.get_scope
#: pywebio.output.popup pywebio.output.put_button pywebio.output.put_buttons
#: pywebio.output.put_code pywebio.output.put_collapse
#: pywebio.output.put_column pywebio.output.put_file pywebio.output.put_grid
#: pywebio.output.put_html pywebio.output.put_image pywebio.output.put_link
#: pywebio.output.put_loading pywebio.output.put_markdown
#: pywebio.output.put_processbar pywebio.output.put_row
#: pywebio.output.put_scope pywebio.output.put_scrollable
#: pywebio.output.put_table pywebio.output.put_tabs pywebio.output.put_text
#: pywebio.output.put_widget pywebio.output.remove pywebio.output.scroll_to
#: pywebio.output.set_processbar pywebio.output.span pywebio.output.style
#: pywebio.output.toast pywebio.output.use_scope
msgid "Parameters"
msgstr "پارامتر ها"

#: of pywebio.output.put_scope:4
msgid "The initial content of the scope, can be ``put_xxx()`` or a list of it."
msgstr ""

#: of pywebio.output:169 pywebio.output.put_buttons:46
#: pywebio.output.put_code:6 pywebio.output.put_collapse:7
#: pywebio.output.put_column:6 pywebio.output.put_file:8
#: pywebio.output.put_grid:17 pywebio.output.put_html:5
#: pywebio.output.put_image:10 pywebio.output.put_link:7
#: pywebio.output.put_loading:6 pywebio.output.put_markdown:10
#: pywebio.output.put_processbar:7 pywebio.output.put_row:19
#: pywebio.output.put_scope:5 pywebio.output.put_scrollable:11
#: pywebio.output.put_table:13 pywebio.output.put_tabs:5
#: pywebio.output.put_widget:11
msgid "Those arguments have the same meaning as for `put_text()`"
msgstr ""

#: of pywebio.output.use_scope:1
msgid "Open or enter a scope. Can be used as context manager and decorator."
msgstr ""

#: of pywebio.output.use_scope:3
msgid "See :ref:`User manual - use_scope() <use_scope>`"
msgstr ""

#: of pywebio.output.use_scope:5
msgid ""
"Scope name. If it is None, a globally unique scope name is generated. "
"(When used as context manager, the context manager will return the scope "
"name)"
msgstr ""

#: of pywebio.output.use_scope:7
msgid "Whether to clear the contents of the scope before entering the scope."
msgstr ""

#: of pywebio.output.use_scope
msgid "Usage"
msgstr ""

#: of pywebio.output.use_scope:13
msgid ""
"with use_scope(...) as scope_name:\n"
"    put_xxx()\n"
"\n"
"@use_scope(...)\n"
"def app():\n"
"    put_xxx()"
msgstr ""

#: of pywebio.output.get_scope:1
msgid "Get the scope name of runtime scope stack"
msgstr ""

#: of pywebio.output.get_scope:3
msgid ""
"The index of the runtime scope stack. Default is -1.  0 means the top "
"level scope(the ``ROOT`` Scope), -1 means the current Scope, -2 means the"
" scope used before entering the current scope, ..."
msgstr ""

#: of pywebio.output.get_scope:3
msgid "The index of the runtime scope stack. Default is -1."
msgstr ""

#: of pywebio.output.get_scope:5
msgid ""
"0 means the top level scope(the ``ROOT`` Scope), -1 means the current "
"Scope, -2 means the scope used before entering the current scope, ..."
msgstr ""

#: of pywebio.output.get_scope pywebio.output.style
msgid "Returns"
msgstr ""

#: of pywebio.output.get_scope:8
msgid ""
"Returns the scope name with the index, and returns ``None`` when occurs "
"index error"
msgstr ""

#: of pywebio.output.clear:1
msgid "Clear the content of the specified scope"
msgstr ""

#: of pywebio.output.clear:3 pywebio.output.remove:3
msgid "Target scope name. Default is the current scope."
msgstr ""

#: of pywebio.output.remove:1
msgid "Remove the specified scope"
msgstr ""

#: of pywebio.output.scroll_to:1
msgid "Scroll the page to the specified scope"
msgstr ""

#: of pywebio.output.scroll_to:3
msgid "Target scope. Default is the current scope."
msgstr ""

#: of pywebio.output.scroll_to:4
msgid ""
"Where to place the scope in the visible area of the page. Available "
"value:  * ``'top'`` : Keep the scope at the top of the visible area of "
"the page * ``'middle'`` : Keep the scope at the middle of the visible "
"area of the page * ``'bottom'`` : Keep the scope at the bottom of the "
"visible area of the page"
msgstr ""

#: of pywebio.output.scroll_to:4
msgid ""
"Where to place the scope in the visible area of the page. Available value:"
msgstr ""

#: of pywebio.output.scroll_to:6
msgid "``'top'`` : Keep the scope at the top of the visible area of the page"
msgstr ""

#: of pywebio.output.scroll_to:7
msgid ""
"``'middle'`` : Keep the scope at the middle of the visible area of the "
"page"
msgstr ""

#: of pywebio.output.scroll_to:8
msgid ""
"``'bottom'`` : Keep the scope at the bottom of the visible area of the "
"page"
msgstr ""

#: of pywebio.output:105
msgid "**Scope related parameters of output function**"
msgstr ""

#: of pywebio.output:107
msgid ""
"The output function will output the content to the \"current scope\" by "
"default, and the \"current scope\" for the runtime context can be set by "
"`use_scope()`."
msgstr ""

#: of pywebio.output:110
msgid ""
"In addition, all output functions support a ``scope`` parameter to "
"specify the destination scope to output:"
msgstr ""

#: of pywebio.output:112
msgid ""
"with use_scope('scope3'):\n"
"    put_text('text1 in scope3')   # output to current scope: scope3\n"
"    put_text('text in ROOT scope', scope='ROOT')   # output to ROOT Scope"
"\n"
"\n"
"put_text('text2 in scope3', scope='scope3')   # output to scope3"
msgstr ""

#: of pywebio.output:122
msgid "The results of the above code are as follows::"
msgstr ""

#: of pywebio.output:124
msgid ""
"text1 in scope3\n"
"text2 in scope3\n"
"text in ROOT scope"
msgstr ""

#: of pywebio.output:128
msgid ""
"A scope can contain multiple output items, the default behavior of output"
" function is to append its content to target scope. The ``position`` "
"parameter of output function can be used to specify the insert position "
"in target scope."
msgstr ""

#: of pywebio.output:131
msgid ""
"Each output item in a scope has an index, the first item's index is 0, "
"and the next item's index is incremented by one. You can also use a "
"negative number to index the items in the scope, -1 means the last item, "
"-2 means the item before the last, ..."
msgstr ""

#: of pywebio.output:134
msgid ""
"The ``position`` parameter of output functions accepts an integer. When "
"``position>=0``, it means to insert content before the item whose index "
"equal ``position``; when ``position<0``, it means to insert content after"
" the item whose index equal ``position``:"
msgstr ""

#: of pywebio.output:138
msgid ""
"with use_scope('scope1'):\n"
"    put_text('A')\n"
"## ----\n"
"with use_scope('scope1'):  # ..demo-only\n"
"    put_text('B', position=0)   # insert B before A -> B A\n"
"## ----\n"
"with use_scope('scope1'):  # ..demo-only\n"
"    put_text('C', position=-2)  # insert C after B -> B C A\n"
"## ----\n"
"with use_scope('scope1'):  # ..demo-only\n"
"    put_text('D', position=1)   # insert D before C B -> B D C A"
msgstr ""

#: of pywebio.output:154
msgid "**Output functions**"
msgstr ""

#: of pywebio.output.put_text:3
msgid ""
"Texts need to output. The type can be any object, and the `str()` "
"function will be used for non-string objects."
msgstr ""

#: of pywebio.output.put_text:4
msgid "The separator between the texts"
msgstr ""

#: of pywebio.output.put_text:5
msgid ""
"Use text as an inline element (no line break at the end of the text). "
"Default is ``False``"
msgstr ""

#: of pywebio.output.put_text:6
msgid ""
"The target scope to output. If the scope does not exist, no operation "
"will be performed.  Can specify the scope name or use a integer to index "
"the runtime scope stack."
msgstr ""

#: of pywebio.output.put_text:6
msgid ""
"The target scope to output. If the scope does not exist, no operation "
"will be performed."
msgstr ""

#: of pywebio.output.put_text:8
msgid ""
"Can specify the scope name or use a integer to index the runtime scope "
"stack."
msgstr ""

#: of pywebio.output.put_text:9
msgid "The position where the content is output in target scope"
msgstr ""

#: of pywebio.output.put_text:11
msgid ""
"For more information about ``scope`` and ``position`` parameter, please "
"refer to :ref:`User Manual <scope_param>`"
msgstr ""

#: of pywebio.output.put_markdown:3
msgid "Markdown string"
msgstr ""

#: of pywebio.output.put_markdown:4
msgid ""
"Whether to remove the leading whitespace in each line of ``mdcontent``. "
"The number of the whitespace to remove will be decided cleverly."
msgstr ""

#: of pywebio.output.put_markdown:6
msgid ""
"Configuration when parsing Markdown. PyWebIO uses `marked "
"<https://marked.js.org/>`_ library to parse Markdown, the parse options "
"see: https://marked.js.org/using_advanced#options (Only supports members "
"of string and boolean type)"
msgstr ""

#: of pywebio.output.put_html:4 pywebio.output.put_markdown:9
msgid ""
"Whether to use `DOMPurify <https://github.com/cure53/DOMPurify>`_ to "
"filter the content to prevent XSS attacks."
msgstr ""

#: of pywebio.output.put_markdown:12
msgid ""
"When using Python triple quotes syntax to output multi-line Markdown in a"
" function, you can indent the Markdown text to keep a good code format. "
"PyWebIO will cleverly remove the indent for you when show the Markdown::"
msgstr ""

#: of pywebio.output.put_markdown:16
msgid ""
"# good code format\n"
"def hello():\n"
"    put_markdown(r\"\"\" # H1\n"
"    This is content.\n"
"    \"\"\")"
msgstr ""

#: of pywebio.output.put_markdown:22
msgid "Enable `lstrip` by default. Deprecate `strip_indent`."
msgstr ""

#: of pywebio.output:166
msgid ""
"Message contents. The item is ``put_xxx()`` call, and any other type will"
" be converted to ``put_text(content)``."
msgstr ""

#: of pywebio.output:168
msgid "Whether to show a dismiss button on the right of the message."
msgstr ""

#: of pywebio.output.put_html:1
msgid "Output HTML content"
msgstr ""

#: of pywebio.output.put_html:3
msgid "html string"
msgstr ""

#: of pywebio.output.put_link:1
msgid "Output hyperlinks to other web page or PyWebIO Application page."
msgstr ""

#: of pywebio.output.put_link:3
msgid "The label of the link"
msgstr ""

#: of pywebio.output.put_link:4
msgid "Target url"
msgstr ""

#: of pywebio.output.put_link:5
msgid ""
"Target PyWebIO Application name. See also: :ref:`Server mode "
"<server_and_script_mode>`"
msgstr ""

#: of pywebio.output.put_link:6
msgid "Whether to open the link in a new window"
msgstr ""

#: of pywebio.output.put_link:9
msgid "The ``url`` and ``app`` parameters must specify one but not both"
msgstr ""

#: of pywebio.output.put_processbar:3
msgid ""
"The name of the progress bar, which is the unique identifier of the "
"progress bar"
msgstr ""

#: of pywebio.output.put_processbar:4
msgid ""
"The initial progress value of the progress bar. The value is between 0 "
"and 1"
msgstr ""

#: of pywebio.output.put_processbar:5 pywebio.output.set_processbar:5
msgid ""
"The label of process bar. The default is the percentage value of the "
"current progress."
msgstr ""

#: of pywebio.output.put_processbar:6
msgid "Whether to remove the progress bar after the progress is completed"
msgstr ""

#: of pywebio.output.put_button:10 pywebio.output.put_buttons:20
#: pywebio.output.put_buttons:63 pywebio.output.put_collapse:9
#: pywebio.output.put_file:10 pywebio.output.put_image:12
#: pywebio.output.put_processbar:9 pywebio.output.put_scrollable:13
#: pywebio.output.put_table:15 pywebio.output.toast:14
msgid "Example:"
msgstr ""

#: of pywebio.output.put_processbar:11
msgid ""
"import time\n"
"\n"
"put_processbar('bar');\n"
"for i in range(1, 11):\n"
"    set_processbar('bar', i / 10)\n"
"    time.sleep(0.1)"
msgstr ""

#: of pywebio.output.put_processbar:22
msgid "use `set_processbar()` to set the progress of progress bar"
msgstr ""

#: of pywebio.output.set_processbar:1
msgid "Set the progress of progress bar"
msgstr ""

#: of pywebio.output.set_processbar:3
msgid "The name of the progress bar"
msgstr ""

#: of pywebio.output.set_processbar:4
msgid "The progress value of the progress bar. The value is between 0 and 1"
msgstr ""

#: of pywebio.output.set_processbar:7
msgid "See also: `put_processbar()`"
msgstr ""

#: of pywebio.output.put_loading:3
msgid ""
"The shape of loading prompt. The available values are: `'border'` "
"(default)、 `'grow'`"
msgstr ""

#: of pywebio.output.put_loading:4
msgid ""
"The color of loading prompt. The available values are: `'primary'` 、 "
"`'secondary'` 、 `'success'` 、 `'danger'` 、 `'warning'` 、`'info'`  "
"、`'light'`  、 `'dark'` (default)"
msgstr ""

#: of pywebio.output.put_loading:8
msgid "`put_loading()` can be used in 2 ways: direct call and context manager:"
msgstr ""

#: of pywebio.output.put_loading:10
msgid ""
"for shape in ('border', 'grow'):\n"
"    for color in ('primary', 'secondary', 'success', 'danger', 'warning',"
" 'info', 'light', 'dark'):\n"
"        put_text(shape, color)\n"
"        put_loading(shape=shape, color=color)\n"
"\n"
"## ----\n"
"import time  # ..demo-only\n"
"# Use as context manager, the loading prompt will disappear automatically"
" when the context block exits.\n"
"with put_loading():\n"
"    time.sleep(3)  # Some time-consuming operations\n"
"    put_text(\"The answer of the universe is 42\")\n"
"\n"
"## ----\n"
"# using style() to set the size of the loading prompt\n"
"put_loading().style('width:4rem; height:4rem')"
msgstr ""

#: of pywebio.output.put_code:3
msgid "code string"
msgstr ""

#: of pywebio.output.put_code:4
msgid "language of code"
msgstr ""

#: of pywebio.output.put_code:5
msgid ""
"The max lines of code can be displayed, no limit by default. The scroll "
"bar will be displayed when the content exceeds."
msgstr ""

#: of pywebio.output.put_table:3
msgid ""
"Table data, which can be a two-dimensional list or a list of dict. The "
"table cell can be a string or ``put_xxx()`` call. The cell can use the "
":func:`span()` to set the cell span."
msgstr ""

#: of pywebio.output.put_table:5
msgid ""
"Table header. When the item of ``tdata`` is of type ``list``, if the "
"``header`` parameter is omitted, the first item of ``tdata`` will be used"
" as the header. The header item can also use the :func:`span()` function "
"to set the cell span.  When ``tdata`` is list of dict, ``header`` is used"
" to specify the order of table headers, which cannot be omitted. In this "
"case, the ``header`` can be a list of dict key or a list of ``(<label>, "
"<dict key>)``."
msgstr ""

#: of pywebio.output.put_table:5
msgid ""
"Table header. When the item of ``tdata`` is of type ``list``, if the "
"``header`` parameter is omitted, the first item of ``tdata`` will be used"
" as the header. The header item can also use the :func:`span()` function "
"to set the cell span."
msgstr ""

#: of pywebio.output.put_table:10
msgid ""
"When ``tdata`` is list of dict, ``header`` is used to specify the order "
"of table headers, which cannot be omitted. In this case, the ``header`` "
"can be a list of dict key or a list of ``(<label>, <dict key>)``."
msgstr ""

#: of pywebio.output.put_table:17
msgid ""
"# 'Name' cell across 2 rows, 'Address' cell across 2 columns\n"
"put_table([\n"
"    [span('Name',row=2), span('Address', col=2)],\n"
"    ['City', 'Country'],\n"
"    ['Wang', 'Beijing', 'China'],\n"
"    ['Liu', 'New York', 'America'],\n"
"])\n"
"## ----\n"
"\n"
"# Use `put_xxx()` in `put_table()`\n"
"put_table([\n"
"    ['Type', 'Content'],\n"
"    ['html', put_html('X<sup>2</sup>')],\n"
"    ['text', '<hr/>'],\n"
"    ['buttons', put_buttons(['A', 'B'], onclick=...)],  # ..doc-only\n"
"    ['buttons', put_buttons(['A', 'B'], onclick=put_text)],  # ..demo-"
"only\n"
"    ['markdown', put_markdown('`Awesome PyWebIO!`')],\n"
"    ['file', put_file('hello.text', b'hello world')],\n"
"    ['table', put_table([['A', 'B'], ['C', 'D']])]\n"
"])\n"
"## ----\n"
"\n"
"# Set table header\n"
"put_table([\n"
"    ['Wang', 'M', 'China'],\n"
"    ['Liu', 'W', 'America'],\n"
"], header=['Name', 'Gender', 'Address'])\n"
"## ----\n"
"\n"
"# When ``tdata`` is list of dict\n"
"put_table([\n"
"    {\"Course\":\"OS\", \"Score\": \"80\"},\n"
"    {\"Course\":\"DB\", \"Score\": \"93\"},\n"
"], header=[\"Course\", \"Score\"])  # or "
"header=[(put_markdown(\"*Course*\"), \"Course\"), "
"(put_markdown(\"*Score*\") ,\"Score\")]"
msgstr ""

#: of pywebio.output.put_table:56
msgid "The cell of table support ``put_xxx()`` calls."
msgstr ""

#: of pywebio.output.span:1
msgid "Create cross-cell content in :func:`put_table()` and :func:`put_grid()`"
msgstr ""

#: of pywebio.output.span:3
msgid "cell content. It can be a string or ``put_xxx()`` call."
msgstr ""

#: of pywebio.output.span:4
msgid "Vertical span, that is, the number of spanning rows"
msgstr ""

#: of pywebio.output.span:5
msgid "Horizontal span, that is, the number of spanning columns"
msgstr ""

#: of pywebio.output.put_grid pywebio.output.put_row pywebio.output.put_widget
#: pywebio.output.span pywebio.output.style
msgid "Example"
msgstr ""

#: of pywebio.output.span:9
msgid ""
"put_table([\n"
"    ['C'],\n"
"    [span('E', col=2)],  # 'E' across 2 columns\n"
"], header=[span('A', row=2), 'B'])  # 'A' across 2 rows\n"
"\n"
"put_grid([\n"
"    [put_text('A'), put_text('B')],\n"
"    [span(put_text('A'), col=2)],  # 'A' across 2 columns\n"
"])"
msgstr ""

#: of pywebio.output.put_buttons:1
msgid "Output a group of buttons and bind click event"
msgstr ""

#: of pywebio.output.put_buttons:3
msgid ""
"Button list. The available formats of list items are:  * dict::      {"
"         \"label\":(str)button label,         \"value\":(str)button "
"value,         \"color\":(str, optional)button color,         "
"\"disabled\":(bool, optional) whether the button is disabled     }  * "
"tuple or list: ``(label, value)`` * single value: label and value of "
"option use the same value  The ``value`` of button can be any type. The "
"``color`` of button can be one of: `primary`, `secondary`, `success`, "
"`danger`, `warning`, `info`, `light`, `dark`.  Example:  .. exportable-"
"codeblock::     :name: put_buttons-btn_class     :summary: "
"`put_buttons()`      put_buttons([dict(label='success', value='s', "
"color='success')], onclick=...)  # ..doc-only     put_buttons([  # "
"..demo-only         dict(label=i, value=i, color=i)  # ..demo-only"
"         for i in ['primary', 'secondary', 'success', 'danger', "
"'warning', 'info', 'light', 'dark']  # ..demo-only     ], "
"onclick=put_text)  # ..demo-only"
msgstr ""

#: of pywebio.output.put_buttons:3
msgid "Button list. The available formats of list items are:"
msgstr ""

#: of pywebio.output.put_buttons:5
msgid "dict::"
msgstr ""

#: of pywebio.output.put_buttons:7
msgid ""
"{\n"
"    \"label\":(str)button label,\n"
"    \"value\":(str)button value,\n"
"    \"color\":(str, optional)button color,\n"
"    \"disabled\":(bool, optional) whether the button is disabled\n"
"}"
msgstr ""

#: of pywebio.output.put_buttons:14
msgid "tuple or list: ``(label, value)``"
msgstr ""

#: of pywebio.output.put_buttons:15
msgid "single value: label and value of option use the same value"
msgstr ""

#: of pywebio.output.put_buttons:17
msgid ""
"The ``value`` of button can be any type. The ``color`` of button can be "
"one of: `primary`, `secondary`, `success`, `danger`, `warning`, `info`, "
"`light`, `dark`."
msgstr ""

#: of pywebio.output.put_buttons:22
msgid ""
"put_buttons([dict(label='success', value='s', color='success')], "
"onclick=...)  # ..doc-only\n"
"put_buttons([  # ..demo-only\n"
"    dict(label=i, value=i, color=i)  # ..demo-only\n"
"    for i in ['primary', 'secondary', 'success', 'danger', 'warning', "
"'info', 'light', 'dark']  # ..demo-only\n"
"], onclick=put_text)  # ..demo-only"
msgstr ""

#: of pywebio.output.put_buttons:33
msgid ""
"Callback which will be called when button is clicked. ``onclick`` can be "
"a callable object or a list of it.  If ``onclick`` is callable object, "
"its signature is ``onclick(btn_value)``. ``btn_value`` is ``value`` of "
"the button that is clicked.  If ``onclick`` is a list, the item receives "
"no parameter. In this case, each item in the list corresponds to the "
"buttons one-to-one.  Tip: You can use ``functools.partial`` to save more "
"context information in ``onclick``.  Note: When in :ref:`Coroutine-based "
"session  <coroutine_based_session>`, the callback can be a coroutine "
"function."
msgstr ""

#: of pywebio.output.put_buttons:33
msgid ""
"Callback which will be called when button is clicked. ``onclick`` can be "
"a callable object or a list of it."
msgstr ""

#: of pywebio.output.put_buttons:35
msgid ""
"If ``onclick`` is callable object, its signature is "
"``onclick(btn_value)``. ``btn_value`` is ``value`` of the button that is "
"clicked."
msgstr ""

#: of pywebio.output.put_buttons:37
msgid ""
"If ``onclick`` is a list, the item receives no parameter. In this case, "
"each item in the list corresponds to the buttons one-to-one."
msgstr ""

#: of pywebio.output.put_buttons:39
msgid ""
"Tip: You can use ``functools.partial`` to save more context information "
"in ``onclick``."
msgstr ""

#: of pywebio.output.put_buttons:41
msgid ""
"Note: When in :ref:`Coroutine-based session  <coroutine_based_session>`, "
"the callback can be a coroutine function."
msgstr ""

#: of pywebio.output.put_buttons:42
msgid "Whether to use small size button. Default is False."
msgstr ""

#: of pywebio.output.put_buttons:43
msgid "Whether to use link style button. Default is False"
msgstr ""

#: of pywebio.output.put_buttons:44
msgid "Whether to use outline style button. Default is False"
msgstr ""

#: of pywebio.output.put_buttons:45
msgid "Whether to group the buttons together. Default is False"
msgstr ""

#: of pywebio.output.put_buttons:47
msgid ""
"Other options of the ``onclick`` callback. There are different options "
"according to the session implementation  When in Coroutine-based Session:"
"     * mutex_mode: Default is ``False``. If set to ``True``, new click "
"event will be ignored when the current callback is running.       This "
"option is available only when ``onclick`` is a coroutine function.  When "
"in Thread-based Session:     * serial_mode: Default is ``False``, and "
"every time a callback is triggered,       the callback function will be "
"executed immediately in a new thread.      If set ``serial_mode`` to "
"``True``     After enabling serial_mode, the button's callback will be "
"executed serially in a resident thread in the session,     and all other "
"new click event callbacks (including the ``serial_mode=False`` callback) "
"will be queued for     the current click event to complete. If the "
"callback function runs for a short time,     you can turn on "
"``serial_mode`` to improve performance."
msgstr ""

#: of pywebio.output.put_buttons:47
msgid ""
"Other options of the ``onclick`` callback. There are different options "
"according to the session implementation"
msgstr ""

#: of pywebio.output.put_buttons:51
msgid "When in Coroutine-based Session:"
msgstr ""

#: of pywebio.output.put_buttons:50
msgid ""
"mutex_mode: Default is ``False``. If set to ``True``, new click event "
"will be ignored when the current callback is running. This option is "
"available only when ``onclick`` is a coroutine function."
msgstr ""

#: of pywebio.output.put_buttons:61
msgid "When in Thread-based Session:"
msgstr ""

#: of pywebio.output.put_buttons:54
msgid ""
"serial_mode: Default is ``False``, and every time a callback is "
"triggered, the callback function will be executed immediately in a new "
"thread."
msgstr ""

#: of pywebio.output.put_buttons:57
msgid ""
"If set ``serial_mode`` to ``True`` After enabling serial_mode, the "
"button's callback will be executed serially in a resident thread in the "
"session, and all other new click event callbacks (including the "
"``serial_mode=False`` callback) will be queued for the current click "
"event to complete. If the callback function runs for a short time, you "
"can turn on ``serial_mode`` to improve performance."
msgstr ""

#: of pywebio.output.put_buttons:65
#, python-format
msgid ""
"from functools import partial\n"
"\n"
"def row_action(choice, id):\n"
"    put_text(\"You click %s button with id: %s\" % (choice, id))\n"
"\n"
"put_buttons(['edit', 'delete'], onclick=partial(row_action, id=1))\n"
"## ----\n"
"\n"
"def edit():\n"
"    put_text(\"You click edit button\")\n"
"def delete():\n"
"    put_text(\"You click delete button\")\n"
"\n"
"put_buttons(['edit', 'delete'], onclick=[edit, delete])"
msgstr ""

#: of pywebio.output.put_buttons:84
msgid ""
"Add ``disabled`` button support. The ``value`` of button can be any "
"object."
msgstr ""

#: of pywebio.output.put_button:1
msgid "Output a single button and bind click event to it."
msgstr ""

#: of pywebio.output.put_button:3
msgid "Button label"
msgstr ""

#: of pywebio.output.put_button:4
msgid "Callback which will be called when button is clicked."
msgstr ""

#: of pywebio.output.put_button:5
msgid ""
"The color of the button, can be one of: `primary`, `secondary`, "
"`success`, `danger`, `warning`, `info`, `light`, `dark`."
msgstr ""

#: of pywebio.output.put_button:7
msgid "Whether the button is disabled"
msgstr ""

#: of pywebio.output.put_button:8
msgid "Those arguments have the same meaning as for `put_buttons()`"
msgstr ""

#: of pywebio.output.put_button:12
msgid ""
"put_button(\"click me\", onclick=lambda: toast(\"Clicked\"), "
"color='success', outline=True)"
msgstr ""

#: of pywebio.output.put_button:20
msgid "add ``disabled`` parameter"
msgstr ""

#: of pywebio.output.put_image:3
msgid ""
"Source of image. It can be a string specifying image URL, a bytes-like "
"object specifying the binary content of an image or an instance of "
"``PIL.Image.Image``"
msgstr ""

#: of pywebio.output.put_image:5
msgid "Image description."
msgstr ""

#: of pywebio.output.put_image:6
msgid ""
"The width of image. It can be CSS pixels (like `'30px'`) or percentage "
"(like `'10%'`)."
msgstr ""

#: of pywebio.output.put_image:7
msgid ""
"The height of image. It can be CSS pixels (like `'30px'`) or percentage "
"(like `'10%'`). If only one value of ``width`` and ``height`` is "
"specified, the browser will scale image according to its original size."
msgstr ""

#: of pywebio.output.put_image:9
msgid ""
"Image format, optinoal. e.g.: ``png``, ``jpeg``, ``gif``, etc. Only "
"available when `src` is non-URL"
msgstr ""

#: of pywebio.output.put_image:14
msgid ""
"from pywebio import STATIC_PATH  # ..demo-only\n"
"img = open(STATIC_PATH + '/image/favicon_open_32.png', 'rb').read()  # "
"..demo-only\n"
"img = open('/path/to/some/image.png', 'rb').read()  # ..doc-only\n"
"put_image(img, width='50px')\n"
"\n"
"## ----\n"
"put_image('https://www.python.org/static/img/python-logo.png')"
msgstr ""

#: of pywebio.output.put_file:3
msgid ""
"To show a link with the file name on the browser. When click the link, "
"the browser automatically downloads the file."
msgstr ""

#: of pywebio.output.put_file:5
msgid "File name downloaded as"
msgstr ""

#: of pywebio.output.put_file:6
msgid "File content. It is a bytes-like object"
msgstr ""

#: of pywebio.output.put_file:7
msgid ""
"The label of the download link, which is the same as the file name by "
"default."
msgstr ""

#: of pywebio.output.put_file:12
msgid ""
"content = open('./some-file', 'rb').read()  # ..doc-only\n"
"content = open('README.md', 'rb').read()    # ..demo-only\n"
"put_file('hello-world.txt', content, 'download me')"
msgstr ""

#: of pywebio.output.put_tabs:1
msgid "Output tabs."
msgstr ""

#: of pywebio.output.put_tabs:3
msgid ""
"Tab list, each item is a dict: ``{\"title\": \"Title\", \"content\": "
"...}`` . The ``content`` can be a string, the ``put_xxx()`` calls , or a "
"list of them."
msgstr ""

#: of pywebio.output.put_tabs:7
msgid ""
"put_tabs([\n"
"    {'title': 'Text', 'content': 'Hello world'},\n"
"    {'title': 'Markdown', 'content': put_markdown('~~Strikethrough~~')},\n"
"    {'title': 'More content', 'content': [\n"
"        put_table([\n"
"            ['Commodity', 'Price'],\n"
"            ['Apple', '5.5'],\n"
"            ['Banana', '7'],\n"
"        ]),\n"
"        put_link('pywebio', 'https://github.com/wang0618/PyWebIO')\n"
"    ]},\n"
"])"
msgstr ""

#: of pywebio.output.put_collapse:3
msgid "Title of content"
msgstr ""

#: of pywebio.output.put_collapse:5 pywebio.output.put_scrollable:4
msgid ""
"The content can be a string, the ``put_xxx()`` calls , or a list of them."
msgstr ""

#: of pywebio.output.put_collapse:6
msgid "Whether to expand the content. Default is ``False``."
msgstr ""

#: of pywebio.output.put_collapse:11
msgid ""
"put_collapse('Collapse title', [\n"
"    'text',\n"
"    put_markdown('~~Strikethrough~~'),\n"
"    put_table([\n"
"        ['Commodity', 'Price'],\n"
"        ['Apple', '5.5'],\n"
"    ])\n"
"], open=True)\n"
"\n"
"## ----\n"
"put_collapse('Large text', 'Awesome PyWebIO! '*30)"
msgstr ""

#: of pywebio.output.put_scrollable:1
msgid ""
"Output a fixed height content area. scroll bar is displayed when the "
"content exceeds the limit"
msgstr ""

#: of pywebio.output.put_scrollable:5
msgid ""
"The height of the area (in pixels). ``height`` parameter also accepts "
"``(min_height, max_height)`` to indicate the range of height, for "
"example, ``(100, 200)`` means that the area has a minimum height of 100 "
"pixels and a maximum of 200 pixels. Set ``None`` if you don't want to "
"limit the height"
msgstr ""

#: of pywebio.output.put_scrollable:9
msgid "Whether to keep the content area scrolled to the bottom when updated."
msgstr ""

#: of pywebio.output.put_scrollable:10
msgid "Whether to show border"
msgstr ""

#: of pywebio.output.put_scrollable:15
msgid ""
"import time\n"
"\n"
"put_scrollable(put_scope('scrollable'), height=200, keep_bottom=True)\n"
"put_text(\"You can click the area to prevent auto scroll.\", "
"scope='scrollable')\n"
"\n"
"while 1:\n"
"    put_text(time.time(), scope='scrollable')\n"
"    time.sleep(0.5)"
msgstr ""

#: of pywebio.output.put_scrollable:28
msgid ""
"add ``height`` parameter，remove ``max_height`` parameter； add "
"``keep_bottom`` parameter"
msgstr ""

#: of pywebio.output.put_scrollable:32
msgid "remove ``horizon_scroll`` parameter"
msgstr ""

#: of pywebio.output.put_widget:3
msgid ""
"html template, using `mustache.js <https://github.com/janl/mustache.js>`_"
" syntax"
msgstr ""

#: of pywebio.output.put_widget:4
msgid ""
"Data used to render the template.  The data can include the ``put_xxx()``"
" calls, and the JS function ``pywebio_output_parse`` can be used to parse"
" the content of ``put_xxx()``. For string input, ``pywebio_output_parse``"
" will parse into text.  ⚠️：When using the ``pywebio_output_parse`` "
"function, you need to turn off the html escaping of mustache: ``{{& "
"pywebio_output_parse}}``, see the example below."
msgstr ""

#: of pywebio.output.put_widget:4
msgid "Data used to render the template."
msgstr ""

#: of pywebio.output.put_widget:6
msgid ""
"The data can include the ``put_xxx()`` calls, and the JS function "
"``pywebio_output_parse`` can be used to parse the content of "
"``put_xxx()``. For string input, ``pywebio_output_parse`` will parse into"
" text."
msgstr ""

#: of pywebio.output.put_widget:9
msgid ""
"⚠️：When using the ``pywebio_output_parse`` function, you need to turn off"
" the html escaping of mustache: ``{{& pywebio_output_parse}}``, see the "
"example below."
msgstr ""

#: of pywebio.output.put_widget:15
msgid ""
"tpl = '''\n"
"<details {{#open}}open{{/open}}>\n"
"    <summary>{{title}}</summary>\n"
"    {{#contents}}\n"
"        {{& pywebio_output_parse}}\n"
"    {{/contents}}\n"
"</details>\n"
"'''\n"
"\n"
"put_widget(tpl, {\n"
"    \"open\": True,\n"
"    \"title\": 'More content',\n"
"    \"contents\": [\n"
"        'text',\n"
"        put_markdown('~~Strikethrough~~'),\n"
"        put_table([\n"
"            ['Commodity', 'Price'],\n"
"            ['Apple', '5.5'],\n"
"            ['Banana', '7'],\n"
"        ])\n"
"    ]\n"
"})"
msgstr ""

#: of pywebio.output.toast:1
msgid "Show a notification message."
msgstr ""

#: of pywebio.output.toast:3
msgid "Notification content."
msgstr ""

#: of pywebio.output.toast:4
msgid ""
"The duration of the notification display, in seconds. `0` means not to "
"close automatically (at this time, a close button will be displayed next "
"to the message, and the user can close the message manually)"
msgstr ""

#: of pywebio.output.toast:6
msgid ""
"Where to display the notification message. Available values are `'left'`,"
" `'center'` and `'right'`."
msgstr ""

#: of pywebio.output.toast:7
msgid ""
"Background color of the notification. Available values are `'info'`, "
"`'error'`, `'warn'`, `'success'` or hexadecimal color value starting with"
" `'#'`"
msgstr ""

#: of pywebio.output.toast:9
msgid ""
"The callback function when the notification message is clicked. The "
"callback function receives no parameters.  Note: When in :ref:`Coroutine-"
"based session <coroutine_based_session>`, the callback can be a coroutine"
" function."
msgstr ""

#: of pywebio.output.toast:9
msgid ""
"The callback function when the notification message is clicked. The "
"callback function receives no parameters."
msgstr ""

#: of pywebio.output.toast:12
msgid ""
"Note: When in :ref:`Coroutine-based session <coroutine_based_session>`, "
"the callback can be a coroutine function."
msgstr ""

#: of pywebio.output.toast:16
msgid ""
"def show_msg():\n"
"    put_text(\"You clicked the notification.\")\n"
"\n"
"toast('New messages', position='right', color='#2188ff', duration=0, "
"onclick=show_msg)"
msgstr ""

#: of pywebio.output.popup:1
msgid "Show a popup."
msgstr ""

#: of pywebio.output.popup:3
msgid ""
"⚠️: In PyWebIO, you can't show multiple popup windows at the same time. "
"Before displaying a new pop-up window, the existing popup on the page "
"will be automatically closed. You can use `close_popup()` to close the "
"popup manually."
msgstr ""

#: of pywebio.output.popup:6
msgid "The title of the popup."
msgstr ""

#: of pywebio.output.popup:8
msgid ""
"The content of the popup can be a string, the put_xxx() calls , or a list"
" of them."
msgstr ""

#: of pywebio.output.popup:9
msgid ""
"The size of popup window. Available values are: ``'large'``, ``'normal'``"
" and ``'small'``."
msgstr ""

#: of pywebio.output.popup:10
msgid ""
"If enabled, the popup can be closed implicitly by clicking the content "
"outside the popup window or pressing the ``Esc`` key. Default is "
"``False``."
msgstr ""

#: of pywebio.output.popup:12
msgid ""
"Whether the user can close the popup window. By default, the user can "
"close the popup by clicking the close button in the upper right of the "
"popup window. When set to ``False``, the popup window can only be closed "
"by :func:`popup_close()`, at this time the ``implicit_close`` parameter "
"will be ignored."
msgstr ""

#: of pywebio.output.popup:17
msgid ""
"``popup()`` can be used in 3 ways: direct call, context manager, and "
"decorator."
msgstr ""

#: of pywebio.output.popup:19
msgid "direct call:"
msgstr ""

#: of pywebio.output.popup:21
msgid ""
"popup('popup title', 'popup text content', size=PopupSize.SMALL)\n"
"## ----\n"
"\n"
"popup('Popup title', [\n"
"    put_html('<h3>Popup Content</h3>'),\n"
"    'html: <br/>',\n"
"    put_table([['A', 'B'], ['C', 'D']]),\n"
"    put_buttons(['close_popup()'], onclick=lambda _: close_popup())\n"
"])"
msgstr ""

#: of pywebio.output.popup:35
msgid "context manager:"
msgstr ""

#: of pywebio.output.popup:37
msgid ""
"with popup('Popup title') as s:\n"
"    put_html('<h3>Popup Content</h3>')\n"
"    put_text('html: <br/>')\n"
"    put_buttons([('clear()', s)], onclick=clear)\n"
"\n"
"put_text('Also work!', scope=s)"
msgstr ""

#: of pywebio.output.popup:49
msgid ""
"The context manager will open a new output scope and return the scope "
"name. The output in the context manager will be displayed on the popup "
"window by default. After the context manager exits, the popup window will"
" not be closed. You can still use the ``scope`` parameter of the output "
"function to output to the popup."
msgstr ""

#: of pywebio.output.popup:54
msgid "decorator:"
msgstr ""

#: of pywebio.output.popup:56
msgid ""
"@popup('Popup title')\n"
"def show_popup():\n"
"    put_html('<h3>Popup Content</h3>')\n"
"    put_text(\"I'm in a popup!\")\n"
"    ...\n"
"\n"
"show_popup()"
msgstr ""

#: of pywebio.output.close_popup:3
msgid "See also: `popup()`"
msgstr ""

#: of pywebio.output.put_row:1
msgid "Use row layout to output content. The content is arranged horizontally"
msgstr ""

#: of pywebio.output.put_column:3 pywebio.output.put_row:3
msgid ""
"Content list, the item is ``put_xxx()`` call or ``None``. ``None`` "
"represents the space between the output"
msgstr ""

#: of pywebio.output.put_row:4
msgid ""
"| Used to indicate the width of the items, is a list of width values "
"separated by space. | Each width value corresponds to the items one-to-"
"one. (``None`` item should also correspond to a width value). | By "
"default, ``size`` assigns a width of 10 pixels to the ``None`` item, and "
"distributes the width equally to the remaining items.  Available format "
"of width value are:   - pixels: like ``100px``  - percentage: Indicates "
"the percentage of available width. like ``33.33%``  - ``fr`` keyword: "
"Represents a scale relationship, 2fr represents twice the width of 1fr  -"
" ``auto`` keyword: Indicates that the length is determined by the browser"
"  - ``minmax(min, max)`` : Generate a length range, indicating that the "
"length is within this range.    It accepts two parameters, minimum and "
"maximum.    For example: ``minmax(100px, 1fr)`` means the length is not "
"less than 100px and not more than 1fr"
msgstr ""

#: of pywebio.output.put_row
msgid ""
"Used to indicate the width of the items, is a list of width values "
"separated by space."
msgstr ""

#: of pywebio.output.put_row
msgid ""
"Each width value corresponds to the items one-to-one. (``None`` item "
"should also correspond to a width value)."
msgstr ""

#: of pywebio.output.put_row
msgid ""
"By default, ``size`` assigns a width of 10 pixels to the ``None`` item, "
"and distributes the width equally to the remaining items."
msgstr ""

#: of pywebio.output.put_row:9
msgid "Available format of width value are:"
msgstr ""

#: of pywebio.output.put_row:11
msgid "pixels: like ``100px``"
msgstr ""

#: of pywebio.output.put_row:12
msgid ""
"percentage: Indicates the percentage of available width. like ``33.33%``"
msgstr ""

#: of pywebio.output.put_row:13
msgid ""
"``fr`` keyword: Represents a scale relationship, 2fr represents twice the"
" width of 1fr"
msgstr ""

#: of pywebio.output.put_row:14
msgid ""
"``auto`` keyword: Indicates that the length is determined by the browser"
msgstr ""

#: of pywebio.output.put_row:15
msgid ""
"``minmax(min, max)`` : Generate a length range, indicating that the "
"length is within this range. It accepts two parameters, minimum and "
"maximum. For example: ``minmax(100px, 1fr)`` means the length is not less"
" than 100px and not more than 1fr"
msgstr ""

#: of pywebio.output.put_row:23
msgid ""
"# Two code blocks of equal width, separated by 10 pixels\n"
"put_row([put_code('A'), None, put_code('B')])\n"
"## ----\n"
"\n"
"# The width ratio of the left and right code blocks is 2:3, which is "
"equivalent to size='2fr 10px 3fr'\n"
"put_row([put_code('A'), None, put_code('B')], size='40% 10px 60%')"
msgstr ""

#: of pywebio.output.put_column:1
msgid "Use column layout to output content. The content is arranged vertically"
msgstr ""

#: of pywebio.output.put_column:4
msgid ""
"Used to indicate the width of the items, is a list of width values "
"separated by space. The format is the same as the ``size`` parameter of "
"the `put_row()` function."
msgstr ""

#: of pywebio.output.put_grid:3
msgid ""
"Content of grid, which is a two-dimensional list. The item of list is "
"``put_xxx()`` call or ``None``. ``None`` represents the space between the"
" output. The item can use the `span()` to set the cell span."
msgstr ""

#: of pywebio.output.put_grid:5
msgid "The width of grid cell."
msgstr ""

#: of pywebio.output.put_grid:6
msgid "The height of grid cell."
msgstr ""

#: of pywebio.output.put_grid:7
msgid ""
"The width of each column of the grid. The width values are separated by a"
" space. Can not use ``cell_widths`` and ``cell_width`` at the same time"
msgstr ""

#: of pywebio.output.put_grid:9
msgid ""
"The height of each row of the grid. The height values are separated by a "
"space. Can not use ``cell_heights`` and ``cell_height`` at the same time"
msgstr ""

#: of pywebio.output.put_grid:11
msgid ""
"Controls how auto-placed items get inserted in the grid. Can be "
"``'row'``(default) or ``'column'`` .   | ``'row'`` : Places items by "
"filling each row  | ``'column'`` : Places items by filling each column"
msgstr ""

#: of pywebio.output.put_grid:11
msgid ""
"Controls how auto-placed items get inserted in the grid. Can be "
"``'row'``(default) or ``'column'`` ."
msgstr ""

#: of pywebio.output.put_grid
msgid "``'row'`` : Places items by filling each row"
msgstr ""

#: of pywebio.output.put_grid
msgid "``'column'`` : Places items by filling each column"
msgstr ""

#: of pywebio.output.put_grid:19
msgid ""
"The format of width/height value in "
"``cell_width``,``cell_height``,``cell_widths``,``cell_heights`` can refer"
" to the ``size`` parameter of the `put_row()` function."
msgstr ""

#: of pywebio.output.put_grid:24
msgid ""
"put_grid([\n"
"    [put_text('A'), put_text('B'), put_text('C')],\n"
"    [None, span(put_text('D'), col=2, row=1)],\n"
"    [put_text('E'), put_text('F'), put_text('G')],\n"
"], cell_width='100px', cell_height='100px')"
msgstr ""

#: of pywebio.output.style:3
msgid "See :ref:`User Guide <style>` for new way to set css style for output."
msgstr ""

#: of pywebio.output.style:6
msgid "The output content can be a ``put_xxx()`` call or a list of it."
msgstr ""

#: of pywebio.output.style:8
msgid "css style string"
msgstr ""

#: of pywebio.output.style:9
msgid ""
"The output contents with css style added:  Note: If ``outputs`` is a list"
" of ``put_xxx()`` calls, the style will be set for each item of the list."
" And the return value can be used in anywhere accept a list of "
"``put_xxx()`` calls."
msgstr ""

#: of pywebio.output.style:9
msgid "The output contents with css style added:"
msgstr ""

#: of pywebio.output.style:11
msgid ""
"Note: If ``outputs`` is a list of ``put_xxx()`` calls, the style will be "
"set for each item of the list. And the return value can be used in "
"anywhere accept a list of ``put_xxx()`` calls."
msgstr ""

#: of pywebio.output.style:16
msgid ""
"style(put_text('Red'), 'color:red')\n"
"\n"
"## ----\n"
"style([\n"
"    put_text('Red'),\n"
"    put_markdown('~~del~~')\n"
"], 'color:red')\n"
"\n"
"## ----\n"
"put_table([\n"
"    ['A', 'B'],\n"
"    ['C', style(put_text('Red'), 'color:red')],\n"
"])\n"
"\n"
"## ----\n"
"put_collapse('title', style([\n"
"    put_text('text'),\n"
"    put_markdown('~~del~~'),\n"
"], 'margin-left:20px'))"
msgstr ""

