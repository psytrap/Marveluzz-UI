# Copyright (C) Weimin Wang
# This file is distributed under the same license as the PyWebIO package.
#
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
# Pikhosh <pikhosh@gmail.com>, 2022.
msgid ""
msgstr ""
"Project-Id-Version: PyWebIO 1.5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-26 16:35+0330\n"
"PO-Revision-Date: 2022-02-28 14:19+0330\n"
"Last-Translator: Pikhosh <pikhosh@gmail.com>\n"
"Language-Team: Persian <>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Language: fa\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Lokalize 21.12.2\n"

#: ../../input.rst:2
msgid "``pywebio.input`` --- Get input from web browser"
msgstr "``pywebio.input`` --- دریافت ورودی از مرورگر وب"

#: of pywebio.input:1
msgid ""
"This module provides functions to get all kinds of input of user from the"
" browser"
msgstr ""

#: of pywebio.input:3
msgid ""
"There are two ways to use the input functions, one is to call the input "
"function alone to get a single input::"
msgstr ""

#: of pywebio.input:5
#, python-format
msgid ""
"name = input(\"What's your name\")\n"
"print(\"Your name is %s\" % name)"
msgstr ""

#: of pywebio.input:8
msgid "The other is to use `input_group` to get multiple inputs at once::"
msgstr ""

#: of pywebio.input:10
msgid ""
"info = input_group(\"User info\",[\n"
"  input('Input your name', name='name'),\n"
"  input('Input your age', name='age', type=NUMBER)\n"
"])\n"
"print(info['name'], info['age'])"
msgstr ""

#: of pywebio.input:16
msgid ""
"When use `input_group`, you needs to provide the ``name`` parameter in "
"each input function to identify the input items in the result."
msgstr ""

#: of pywebio.input:20
msgid ""
"PyWebIO determines whether the input function is in `input_group` or is "
"called alone according to whether the ``name`` parameter is passed. So "
"when calling an input function alone, **do not** set the ``name`` "
"parameter; when calling the input function in `input_group`, you **must**"
" provide the ``name`` parameter."
msgstr ""

#: of pywebio.input:24
msgid ""
"By default, the user can submit empty input value. If the user must "
"provide a non-empty input value, you need to pass ``required=True`` to "
"the input function (some input functions do not support the ``required`` "
"parameter)"
msgstr ""

#: of pywebio.input:27
msgid ""
"The input functions in this module is blocking, and the input form will "
"be destroyed after successful submission. If you want the form to always "
"be displayed on the page and receive input continuously, you can consider"
" the :doc:`pin <./pin>` module."
msgstr ""

#: of pywebio.input:32
msgid "Functions list"
msgstr "لیست توابع"

#: of pywebio.input:36
msgid "Function name"
msgstr ""

#: of pywebio.input:37
msgid "Description"
msgstr ""

#: of pywebio.input:39
msgid "`input <pywebio.input.input>`"
msgstr ""

#: of pywebio.input:40 pywebio.input.input:1
msgid "Text input"
msgstr ""

#: of pywebio.input:42
msgid "`textarea <pywebio.input.textarea>`"
msgstr ""

#: of pywebio.input:43
msgid "Multi-line text input"
msgstr ""

#: of pywebio.input:45
msgid "`select <pywebio.input.select>`"
msgstr ""

#: of pywebio.input:46 pywebio.input.select:1
msgid "Drop-down selection"
msgstr ""

#: of pywebio.input:48
msgid "`checkbox <pywebio.input.checkbox>`"
msgstr ""

#: of pywebio.input:49
msgid "Checkbox"
msgstr ""

#: of pywebio.input:51
msgid "`radio <pywebio.input.radio>`"
msgstr ""

#: of pywebio.input:52
msgid "Radio"
msgstr ""

#: of pywebio.input:54
msgid "`slider <pywebio.input.slider>`"
msgstr ""

#: of pywebio.input:55
msgid "Slider"
msgstr ""

#: of pywebio.input:57
msgid "`actions <pywebio.input.actions>`"
msgstr ""

#: of pywebio.input:58 pywebio.input.actions:1
msgid "Actions selection"
msgstr ""

#: of pywebio.input:60
msgid "`file_upload <pywebio.input.file_upload>`"
msgstr ""

#: of pywebio.input:61 pywebio.input.file_upload:1
msgid "File uploading"
msgstr ""

#: of pywebio.input:63
msgid "`input_group <pywebio.input.input_group>`"
msgstr ""

#: of pywebio.input:64
msgid "Input group"
msgstr ""

#: of pywebio.input:66
msgid "`input_update <pywebio.input.input_update>`"
msgstr ""

#: of pywebio.input:67
msgid "Update input item"
msgstr ""

#: of pywebio.input:71
msgid "Functions doc"
msgstr "مستندات توابع"

#: of pywebio.input.actions pywebio.input.checkbox pywebio.input.file_upload
#: pywebio.input.input pywebio.input.input_group pywebio.input.input_update
#: pywebio.input.radio pywebio.input.select pywebio.input.slider
#: pywebio.input.textarea
msgid "Parameters"
msgstr "پارامتر ها"

#: of pywebio.input.input:3
msgid "Label of input field."
msgstr ""

#: of pywebio.input.input:4
msgid ""
"Input type. Currently supported types are：`TEXT` , `NUMBER` , `FLOAT` , "
"`PASSWORD` , `URL` , `DATE` , `TIME`  Note that `DATE` and `TIME` type "
"are not supported on some browsers, for details see "
"https://developer.mozilla.org/en-"
"US/docs/Web/HTML/Element/input#Browser_compatibility"
msgstr ""

#: of pywebio.input.input:4
msgid ""
"Input type. Currently supported types are：`TEXT` , `NUMBER` , `FLOAT` , "
"`PASSWORD` , `URL` , `DATE` , `TIME`"
msgstr ""

#: of pywebio.input.input:6
msgid ""
"Note that `DATE` and `TIME` type are not supported on some browsers, for "
"details see https://developer.mozilla.org/en-"
"US/docs/Web/HTML/Element/input#Browser_compatibility"
msgstr ""

#: of pywebio.input.input:8
msgid ""
"Input value validation function. If provided, the validation function "
"will be called when user completes the input field or submits the form.  "
"``validate`` receives the input value as a parameter. When the input "
"value is valid, it returns ``None``. When the input value is invalid, it "
"returns an error message string. For example:  .. exportable-codeblock::"
"     :name: input-valid-func     :summary: `input()` validation      def "
"check_age(age):         if age>30:             return 'Too old'         "
"elif age<10:             return 'Too young'     input('Input your age', "
"type=NUMBER, validate=check_age)"
msgstr ""

#: of pywebio.input.input:8
msgid ""
"Input value validation function. If provided, the validation function "
"will be called when user completes the input field or submits the form."
msgstr ""

#: of pywebio.input.input:11
msgid ""
"``validate`` receives the input value as a parameter. When the input "
"value is valid, it returns ``None``. When the input value is invalid, it "
"returns an error message string. For example:"
msgstr ""

#: of pywebio.input.input:14
msgid ""
"def check_age(age):\n"
"    if age>30:\n"
"        return 'Too old'\n"
"    elif age<10:\n"
"        return 'Too young'\n"
"input('Input your age', type=NUMBER, validate=check_age)"
msgstr ""

#: of pywebio.input.input:25
msgid ""
"A string specifying a name for the input. Used with `input_group()` to "
"identify different input items in the results of the input group. If call"
" the input function alone, this parameter can **not** be set!"
msgstr ""

#: of pywebio.input.input:27
msgid "The initial value of the input"
msgstr ""

#: of pywebio.input.input:29
msgid ""
"Put a button on the right side of the input field, and user can click the"
" button to set the value for the input.  ``label`` is the label of the "
"button, and ``callback`` is the callback function to set the input value "
"when clicked.  The callback is invoked with one argument, the "
"``set_value``. ``set_value`` is a callable object, which is invoked with "
"one or two arguments. You can use ``set_value`` to set the value for the "
"input.  ``set_value`` can be invoked with one argument: "
"``set_value(value:str)``. The ``value`` parameter is the value to be set "
"for the input.  ``set_value`` can be invoked with two arguments: "
"``set_value(value:any, label:str)``. Each arguments are described as "
"follows:   * ``value`` : The real value of the input, can be any object. "
"it will not be passed to the user browser.  * ``label`` : The text "
"displayed to the user  When calling ``set_value`` with two arguments, the"
" input item in web page will become read-only.  The usage scenario of "
"``set_value(value:any, label:str)`` is: You need to dynamically generate "
"the value of the input in the callback, and hope that the result "
"displayed to the user is different from the actual submitted data (for "
"example, result displayed to the user can be some user-friendly texts, "
"and the value of the input can be objects that are easier to process)  "
"Usage example:  .. exportable-codeblock::     :name: input-action     "
":summary: `input()` action usage      import time     def "
"set_now_ts(set_value):         set_value(int(time.time()))      ts = "
"input('Timestamp', type=NUMBER, action=('Now', set_now_ts))     "
"put_text('Timestamp:', ts)  # ..demo-only     ## ----     from datetime "
"import date,timedelta     def select_date(set_value):         with "
"popup('Select Date'):             put_buttons(['Today'], onclick=[lambda:"
" set_value(date.today(), 'Today')])             "
"put_buttons(['Yesterday'], onclick=[lambda: set_value(date.today() - "
"timedelta(days=1), 'Yesterday')])      d = input('Date', "
"action=('Select', select_date), readonly=True)     put_text(type(d), d)  "
"Note: When using :ref:`Coroutine-based session <coroutine_based_session>`"
" implementation, the ``callback`` function can be a coroutine function."
msgstr ""

#: of pywebio.input.input:29
msgid ""
"Put a button on the right side of the input field, and user can click the"
" button to set the value for the input."
msgstr ""

#: of pywebio.input.input:31
msgid ""
"``label`` is the label of the button, and ``callback`` is the callback "
"function to set the input value when clicked."
msgstr ""

#: of pywebio.input.input:33
msgid ""
"The callback is invoked with one argument, the ``set_value``. "
"``set_value`` is a callable object, which is invoked with one or two "
"arguments. You can use ``set_value`` to set the value for the input."
msgstr ""

#: of pywebio.input.input:36
msgid ""
"``set_value`` can be invoked with one argument: ``set_value(value:str)``."
" The ``value`` parameter is the value to be set for the input."
msgstr ""

#: of pywebio.input.input:38
msgid ""
"``set_value`` can be invoked with two arguments: ``set_value(value:any, "
"label:str)``. Each arguments are described as follows:"
msgstr ""

#: of pywebio.input.input:40
msgid ""
"``value`` : The real value of the input, can be any object. it will not "
"be passed to the user browser."
msgstr ""

#: of pywebio.input.input:41
msgid "``label`` : The text displayed to the user"
msgstr ""

#: of pywebio.input.input:43
msgid ""
"When calling ``set_value`` with two arguments, the input item in web page"
" will become read-only."
msgstr ""

#: of pywebio.input.input:45
msgid ""
"The usage scenario of ``set_value(value:any, label:str)`` is: You need to"
" dynamically generate the value of the input in the callback, and hope "
"that the result displayed to the user is different from the actual "
"submitted data (for example, result displayed to the user can be some "
"user-friendly texts, and the value of the input can be objects that are "
"easier to process)"
msgstr ""

#: of pywebio.input.input:50
msgid "Usage example:"
msgstr ""

#: of pywebio.input.input:52
msgid ""
"import time\n"
"def set_now_ts(set_value):\n"
"    set_value(int(time.time()))\n"
"\n"
"ts = input('Timestamp', type=NUMBER, action=('Now', set_now_ts))\n"
"put_text('Timestamp:', ts)  # ..demo-only\n"
"## ----\n"
"from datetime import date,timedelta\n"
"def select_date(set_value):\n"
"    with popup('Select Date'):\n"
"        put_buttons(['Today'], onclick=[lambda: set_value(date.today(), "
"'Today')])\n"
"        put_buttons(['Yesterday'], onclick=[lambda: "
"set_value(date.today() - timedelta(days=1), 'Yesterday')])\n"
"\n"
"d = input('Date', action=('Select', select_date), readonly=True)\n"
"put_text(type(d), d)"
msgstr ""

#: of pywebio.input.input:72
msgid ""
"Note: When using :ref:`Coroutine-based session <coroutine_based_session>`"
" implementation, the ``callback`` function can be a coroutine function."
msgstr ""

#: of pywebio.input.input:75
msgid ""
"A callback function which will be called when the value of this input "
"field changed.  The ``onchange`` callback is invoked with one argument, "
"the current value of input field. A typical usage scenario of "
"``onchange`` is to update other input item by using `input_update()`"
msgstr ""

#: of pywebio.input.input:75
msgid ""
"A callback function which will be called when the value of this input "
"field changed."
msgstr ""

#: of pywebio.input.input:77
msgid ""
"The ``onchange`` callback is invoked with one argument, the current value"
" of input field. A typical usage scenario of ``onchange`` is to update "
"other input item by using `input_update()`"
msgstr ""

#: of pywebio.input.input:80
msgid ""
"A hint to the user of what can be entered in the input. It will appear in"
" the input field when it has no value set."
msgstr ""

#: of pywebio.input.input:81
msgid ""
"Whether a value is required for the input to be submittable, default is "
"``False``"
msgstr ""

#: of pywebio.input.input:82
msgid "Whether the value is readonly(not editable)"
msgstr ""

#: of pywebio.input.input:83
msgid ""
"A list of predefined values to suggest to the user for this input. Can "
"only be used when ``type=TEXT``"
msgstr ""

#: of pywebio.input.input:84
msgid ""
"Help text for the input. The text will be displayed below the input field"
" with small font"
msgstr ""

#: of pywebio.input.input:85
#, python-format
msgid ""
"Additional html attributes added to the input element. reference: "
"https://developer.mozilla.org/zh-"
"CN/docs/Web/HTML/Element/input#%E5%B1%9E%E6%80%A7"
msgstr ""

#: of pywebio.input.actions pywebio.input.checkbox pywebio.input.file_upload
#: pywebio.input.input pywebio.input.input_group pywebio.input.radio
#: pywebio.input.select pywebio.input.textarea
msgid "Returns"
msgstr ""

#: of pywebio.input.input:87
msgid "The value that user input."
msgstr ""

#: of pywebio.input.textarea:1
msgid "Text input area (multi-line text input)"
msgstr ""

#: of pywebio.input.textarea:3
msgid ""
"The number of visible text lines for the input area. Scroll bar will be "
"used when content exceeds."
msgstr ""

#: of pywebio.input.textarea:4
msgid ""
"The maximum number of characters (UTF-16 code units) that the user can "
"enter. If this value isn't specified, the user can enter an unlimited "
"number of characters."
msgstr ""

#: of pywebio.input.textarea:6
msgid ""
"The minimum number of characters (UTF-16 code units) required that the "
"user should enter."
msgstr ""

#: of pywebio.input.textarea:7
msgid ""
"Enable a code style editor by providing the `Codemirror "
"<https://codemirror.net/>`_ options:  .. exportable-codeblock::     "
":name: textarea-code     :summary: `textarea()` code editor style      "
"res = textarea('Text area', code={         'mode': \"python\",         "
"'theme': 'darcula'     })     put_code(res, language='python')  # ..demo-"
"only  You can simply use ``code={}`` or ``code=True`` to enable code "
"style editor. You can use ``Esc`` or ``F11`` to toggle fullscreen of code"
" style textarea.  Some commonly used Codemirror options are listed "
":ref:`here <codemirror_options>`."
msgstr ""

#: of pywebio.input.textarea:7
msgid ""
"Enable a code style editor by providing the `Codemirror "
"<https://codemirror.net/>`_ options:"
msgstr ""

#: of pywebio.input.textarea:9
msgid ""
"res = textarea('Text area', code={\n"
"    'mode': \"python\",\n"
"    'theme': 'darcula'\n"
"})\n"
"put_code(res, language='python')  # ..demo-only"
msgstr ""

#: of pywebio.input.textarea:19
msgid ""
"You can simply use ``code={}`` or ``code=True`` to enable code style "
"editor. You can use ``Esc`` or ``F11`` to toggle fullscreen of code style"
" textarea."
msgstr ""

#: of pywebio.input.textarea:22
msgid ""
"Some commonly used Codemirror options are listed :ref:`here "
"<codemirror_options>`."
msgstr ""

#: of pywebio.input.actions:39 pywebio.input.checkbox:7
#: pywebio.input.file_upload:23 pywebio.input.radio:8 pywebio.input.select:29
#: pywebio.input.slider:8 pywebio.input.textarea:24
msgid "Those arguments have the same meaning as for `input()`"
msgstr ""

#: of pywebio.input.textarea:26
msgid "The string value that user input."
msgstr ""

#: of pywebio.input.select:3
msgid ""
"By default, only one option can be selected at a time, you can set "
"``multiple`` parameter to enable multiple selection."
msgstr ""

#: of pywebio.input.select:5
msgid ""
"list of options. The available formats of the list items are:  * dict::"
"      {         \"label\":(str) option label,         \"value\":(object) "
"option value,         \"selected\":(bool, optional) whether the option is"
" initially selected,         \"disabled\":(bool, optional) whether the "
"option is initially disabled     }  * tuple or list: ``(label, value, "
"[selected,] [disabled])`` * single value: label and value of option use "
"the same value  Attention：  1. The ``value`` of option can be any JSON "
"serializable object 2. If the ``multiple`` is not ``True``, the list of "
"options can only have one ``selected`` item at most."
msgstr ""

#: of pywebio.input.select:5
msgid "list of options. The available formats of the list items are:"
msgstr ""

#: of pywebio.input.actions:8 pywebio.input.select:7
msgid "dict::"
msgstr ""

#: of pywebio.input.select:9
msgid ""
"{\n"
"    \"label\":(str) option label,\n"
"    \"value\":(object) option value,\n"
"    \"selected\":(bool, optional) whether the option is initially "
"selected,\n"
"    \"disabled\":(bool, optional) whether the option is initially "
"disabled\n"
"}"
msgstr ""

#: of pywebio.input.select:16
msgid "tuple or list: ``(label, value, [selected,] [disabled])``"
msgstr ""

#: of pywebio.input.select:17
msgid "single value: label and value of option use the same value"
msgstr ""

#: of pywebio.input.select:19
msgid "Attention："
msgstr ""

#: of pywebio.input.select:21
msgid "The ``value`` of option can be any JSON serializable object"
msgstr ""

#: of pywebio.input.select:22
msgid ""
"If the ``multiple`` is not ``True``, the list of options can only have "
"one ``selected`` item at most."
msgstr ""

#: of pywebio.input.select:24
msgid "whether multiple options can be selected"
msgstr ""

#: of pywebio.input.select:25
msgid ""
"The value of the initial selected item. When ``multiple=True``, ``value``"
" must be a list. You can also set the initial selected option by setting "
"the ``selected`` field in the ``options`` list item."
msgstr ""

#: of pywebio.input.select:28
msgid ""
"Whether to select at least one item, only available when ``multiple=True``"
msgstr ""

#: of pywebio.input.select:30
msgid ""
"If ``multiple=True``, return a list of the values in the ``options`` "
"selected by the user; otherwise, return the single value selected by the "
"user."
msgstr ""

#: of pywebio.input.checkbox:1
msgid ""
"A group of check box that allowing single values to be "
"selected/deselected."
msgstr ""

#: of pywebio.input.checkbox:3 pywebio.input.radio:3
msgid ""
"List of options. The format is the same as the ``options`` parameter of "
"the `select()` function"
msgstr ""

#: of pywebio.input.checkbox:4 pywebio.input.radio:4
msgid "Whether to display the options on one line. Default is ``False``"
msgstr ""

#: of pywebio.input.checkbox:5
msgid ""
"The value list of the initial selected items. You can also set the "
"initial selected option by setting the ``selected`` field in the "
"``options`` list item."
msgstr ""

#: of pywebio.input.checkbox:8
msgid "A list of the values in the ``options`` selected by the user"
msgstr ""

#: of pywebio.input.radio:1
msgid "A group of radio button. Only a single button can be selected."
msgstr ""

#: of pywebio.input.radio:5
msgid ""
"The value of the initial selected items. You can also set the initial "
"selected option by setting the ``selected`` field in the ``options`` list"
" item."
msgstr ""

#: of pywebio.input.radio:7
msgid ""
"whether to must select one option. (the user can select nothing option by"
" default)"
msgstr ""

#: of pywebio.input.radio:9
msgid ""
"The value of the option selected by the user, if the user does not select"
" any value, return ``None``"
msgstr ""

#: of pywebio.input.actions:3
msgid ""
"It is displayed as a group of buttons on the page. After the user clicks "
"the button of it, it will behave differently depending on the type of the"
" button."
msgstr ""

#: of pywebio.input.actions:6
msgid ""
"list of buttons. The available formats of the list items are:   * dict::"
"        {          \"label\":(str) button label,          "
"\"value\":(object) button value,          \"type\":(str, optional) button"
" type,          \"disabled\":(bool, optional) whether the button is "
"disabled,          \"color\":(str, optional) button color       }     "
"When ``type='reset'/'cancel'`` or ``disabled=True``, ``value`` can be "
"omitted  * tuple or list: ``(label, value, [type], [disabled])``  * "
"single value: label and value of button use the same value  The ``value``"
" of button can be any JSON serializable object.  ``type`` can be:   * "
"``'submit'`` : After clicking the button, the entire form is submitted "
"immediately,    and the value of this input item in the final form is the"
" ``value`` of the button that was clicked.    ``'submit'`` is the default"
" value of ``type``  * ``'cancel'`` : Cancel form. After clicking the "
"button, the entire form will be submitted immediately,    and the form "
"value will return ``None``  * ``'reset'`` : Reset form. After clicking "
"the button, the entire form will be reset,    and the input items will "
"become the initial state.    Note: After clicking the ``type=reset`` "
"button, the form will not be submitted,    and the ``actions()`` call "
"will not return   The ``color`` of button can be one of: `primary`, "
"`secondary`, `success`, `danger`, `warning`, `info`, `light`,  `dark`."
msgstr ""

#: of pywebio.input.actions:6
msgid "list of buttons. The available formats of the list items are:"
msgstr ""

#: of pywebio.input.actions:10
msgid ""
"{\n"
"   \"label\":(str) button label,\n"
"   \"value\":(object) button value,\n"
"   \"type\":(str, optional) button type,\n"
"   \"disabled\":(bool, optional) whether the button is disabled,\n"
"   \"color\":(str, optional) button color\n"
"}"
msgstr ""

#: of pywebio.input.actions:18
msgid ""
"When ``type='reset'/'cancel'`` or ``disabled=True``, ``value`` can be "
"omitted"
msgstr ""

#: of pywebio.input.actions:19
msgid "tuple or list: ``(label, value, [type], [disabled])``"
msgstr ""

#: of pywebio.input.actions:20
msgid "single value: label and value of button use the same value"
msgstr ""

#: of pywebio.input.actions:22
msgid "The ``value`` of button can be any JSON serializable object."
msgstr ""

#: of pywebio.input.actions:24
msgid "``type`` can be:"
msgstr ""

#: of pywebio.input.actions:26
msgid ""
"``'submit'`` : After clicking the button, the entire form is submitted "
"immediately, and the value of this input item in the final form is the "
"``value`` of the button that was clicked. ``'submit'`` is the default "
"value of ``type``"
msgstr ""

#: of pywebio.input.actions:29
msgid ""
"``'cancel'`` : Cancel form. After clicking the button, the entire form "
"will be submitted immediately, and the form value will return ``None``"
msgstr ""

#: of pywebio.input.actions:31
msgid ""
"``'reset'`` : Reset form. After clicking the button, the entire form will"
" be reset, and the input items will become the initial state. Note: After"
" clicking the ``type=reset`` button, the form will not be submitted, and "
"the ``actions()`` call will not return"
msgstr ""

#: of pywebio.input.actions:36
msgid ""
"The ``color`` of button can be one of: `primary`, `secondary`, `success`,"
" `danger`, `warning`, `info`, `light`, `dark`."
msgstr ""

#: of pywebio.input.actions:40
msgid ""
"If the user clicks the ``type=submit`` button to submit the form, return "
"the value of the button clicked by the user. If the user clicks the "
"``type=cancel`` button or submits the form by other means, ``None`` is "
"returned."
msgstr ""

#: of pywebio.input.actions:44
msgid ""
"When ``actions()`` is used as the last input item in `input_group()` and "
"contains a button with ``type='submit'``, the default submit button of "
"the `input_group()` form will be replace with the current ``actions()``"
msgstr ""

#: of pywebio.input.actions:47
msgid "**usage scenes of actions() **"
msgstr ""

#: of pywebio.input.actions:51
msgid "Perform simple selection operations:"
msgstr ""

#: of pywebio.input.actions:53
#, python-format
msgid ""
"confirm = actions('Confirm to delete file?', ['confirm', 'cancel'],\n"
"                      help_text='Unrecoverable after file deletion')\n"
"if confirm=='confirm':  # ..doc-only\n"
"    ...  # ..doc-only\n"
"put_markdown('You clicked the `%s` button' % confirm)  # ..demo-only"
msgstr ""

#: of pywebio.input.actions:63
msgid ""
"Compared with other input items, when using `actions()`, the user only "
"needs to click once to complete the submission."
msgstr ""

#: of pywebio.input.actions:65
msgid "Replace the default submit button:"
msgstr ""

#: of pywebio.input.actions:67
msgid ""
"import json  # ..demo-only\n"
"             # ..demo-only\n"
"info = input_group('Add user', [\n"
"    input('username', type=TEXT, name='username', required=True),\n"
"    input('password', type=PASSWORD, name='password', required=True),\n"
"    actions('actions', [\n"
"        {'label': 'Save', 'value': 'save'},\n"
"        {'label': 'Save and add next', 'value': 'save_and_continue'},\n"
"        {'label': 'Reset', 'type': 'reset', 'color': 'warning'},\n"
"        {'label': 'Cancel', 'type': 'cancel', 'color': 'danger'},\n"
"    ], name='action', help_text='actions'),\n"
"])\n"
"put_code('info = ' + json.dumps(info, indent=4))\n"
"if info is not None:\n"
"    save_user(info['username'], info['password'])  # ..doc-only\n"
"    if info['action'] == 'save_and_continue':\n"
"        add_next()  # ..doc-only\n"
"        put_text('Save and add next...')  # ..demo-only"
msgstr ""

#: of pywebio.input.file_upload:3
msgid ""
"Single value or list, indicating acceptable file types. The available "
"formats of file types are:  * A valid case-insensitive filename "
"extension, starting with a period (\".\") character. For example: "
"``.jpg``, ``.pdf``, or ``.doc``. * A valid MIME type string, with no "
"extensions.   For examples: ``application/pdf``, ``audio/*``, "
"``video/*``, ``image/*``.   For more information, please visit: "
"https://developer.mozilla.org/en-"
"US/docs/Web/HTTP/Basics_of_HTTP/MIME_types"
msgstr ""

#: of pywebio.input.file_upload:3
msgid ""
"Single value or list, indicating acceptable file types. The available "
"formats of file types are:"
msgstr ""

#: of pywebio.input.file_upload:5
msgid ""
"A valid case-insensitive filename extension, starting with a period "
"(\".\") character. For example: ``.jpg``, ``.pdf``, or ``.doc``."
msgstr ""

#: of pywebio.input.file_upload:6
msgid ""
"A valid MIME type string, with no extensions. For examples: "
"``application/pdf``, ``audio/*``, ``video/*``, ``image/*``. For more "
"information, please visit: https://developer.mozilla.org/en-"
"US/docs/Web/HTTP/Basics_of_HTTP/MIME_types"
msgstr ""

#: of pywebio.input.file_upload:11
msgid ""
"A hint to the user of what to be uploaded. It will appear in the input "
"field when there is no file selected."
msgstr ""

#: of pywebio.input.file_upload:12
msgid "Whether to allow upload multiple files. Default is ``False``."
msgstr ""

#: of pywebio.input.file_upload:13
msgid ""
"The maximum size of a single file, exceeding the limit will prohibit "
"uploading.  The default is 0, which means there is no limit to the size."
"  ``max_size`` can be a integer indicating the number of bytes, or a "
"case-insensitive string ending with `K` / `M` / `G` (representing "
"kilobytes, megabytes, and gigabytes, respectively). E.g: "
"``max_size=500``, ``max_size='40K'``, ``max_size='3M'``"
msgstr ""

#: of pywebio.input.file_upload:14
msgid ""
"The maximum size of a single file, exceeding the limit will prohibit "
"uploading."
msgstr ""

#: of pywebio.input.file_upload:14
msgid "The default is 0, which means there is no limit to the size."
msgstr ""

#: of pywebio.input.file_upload:16
msgid ""
"``max_size`` can be a integer indicating the number of bytes, or a case-"
"insensitive string ending with `K` / `M` / `G` (representing kilobytes, "
"megabytes, and gigabytes, respectively). E.g: ``max_size=500``, "
"``max_size='40K'``, ``max_size='3M'``"
msgstr ""

#: of pywebio.input.file_upload:20
msgid ""
"The maximum size of all files. Only available when ``multiple=True``. The"
" default is 0, which means there is no limit to the size. The format is "
"the same as the ``max_size`` parameter"
msgstr ""

#: of pywebio.input.file_upload:22
msgid ""
"Indicates whether the user must specify a file for the input. Default is "
"``False``."
msgstr ""

#: of pywebio.input.file_upload:24
msgid ""
"When ``multiple=False``, a dict is returned::   {      'filename': file "
"name，      'content'：content of the file (in bytes),      'mime_type': "
"MIME type of the file,      'last_modified': Last modified time "
"(timestamp) of the file  }  If there is no file uploaded, return "
"``None``.  When ``multiple=True``, a list is returned. The format of the "
"list item is the same as the return value when ``multiple=False`` above. "
"If the user does not upload a file, an empty list is returned."
msgstr ""

#: of pywebio.input.file_upload:24
msgid "When ``multiple=False``, a dict is returned::"
msgstr ""

#: of pywebio.input.file_upload:26
msgid ""
"{\n"
"    'filename': file name，\n"
"    'content'：content of the file (in bytes),\n"
"    'mime_type': MIME type of the file,\n"
"    'last_modified': Last modified time (timestamp) of the file\n"
"}"
msgstr ""

#: of pywebio.input.file_upload:33
msgid "If there is no file uploaded, return ``None``."
msgstr ""

#: of pywebio.input.file_upload:35
msgid ""
"When ``multiple=True``, a list is returned. The format of the list item "
"is the same as the return value when ``multiple=False`` above. If the "
"user does not upload a file, an empty list is returned."
msgstr ""

#: of pywebio.input.file_upload:40
msgid ""
"If uploading large files, please pay attention to the file upload size "
"limit setting of the web framework. When using :func:`start_server() "
"<pywebio.platform.tornado.start_server>` or :func:`path_deploy() "
"<pywebio.platform.path_deploy>` to start the PyWebIO application, the "
"maximum file size to be uploaded allowed by the web framework can be set "
"through the ``max_payload_size`` parameter."
msgstr ""

#: of pywebio.input.file_upload:45
msgid ""
"# Upload a file and save to server                      # ..doc-only\n"
"f = input.file_upload(\"Upload a file\")                  # ..doc-only\n"
"open('asset/'+f['filename'], 'wb').write(f['content'])  # ..doc-only\n"
"\n"
"imgs = file_upload(\"Select some pictures:\", accept=\"image/*\", "
"multiple=True)\n"
"for img in imgs:\n"
"    put_image(img['content'])"
msgstr ""

#: of pywebio.input.slider:1
msgid "Range input."
msgstr ""

#: of pywebio.input.slider:3
msgid "The initial value of the slider."
msgstr ""

#: of pywebio.input.slider:4
msgid "The minimum permitted value."
msgstr ""

#: of pywebio.input.slider:5
msgid "The maximum permitted value."
msgstr ""

#: of pywebio.input.slider:6
msgid ""
"The stepping interval. Only available when ``value``, ``min_value`` and "
"``max_value`` are all integer."
msgstr ""

#: of pywebio.input.slider
msgid "return int/float"
msgstr ""

#: of pywebio.input.slider:9
msgid ""
"If one of ``value``, ``min_value`` and ``max_value`` is float, the return"
" value is a float, otherwise an int is returned."
msgstr ""

#: of pywebio.input.input_group:1
msgid "Input group. Request a set of inputs from the user at once."
msgstr ""

#: of pywebio.input.input_group:3
msgid "Label of input group."
msgstr ""

#: of pywebio.input.input_group:4
msgid ""
"Input items. The item of the list is the call to the single input "
"function, and the ``name`` parameter need to be passed in the single "
"input function."
msgstr ""

#: of pywebio.input.input_group:6
msgid ""
"validation function for the group. If provided, the validation function "
"will be called when the user submits the form.  Function signature: "
"``callback(data) -> (name, error_msg)``. ``validate`` receives the value "
"of the entire group as a parameter. When the form value is valid, it "
"returns ``None``. When an input item's value is invalid, it returns the "
"``name`` value of the item and an error message. For example:"
msgstr ""

#: of pywebio.input.input_group:6
msgid ""
"validation function for the group. If provided, the validation function "
"will be called when the user submits the form."
msgstr ""

#: of pywebio.input.input_group:8
msgid ""
"Function signature: ``callback(data) -> (name, error_msg)``. ``validate``"
" receives the value of the entire group as a parameter. When the form "
"value is valid, it returns ``None``. When an input item's value is "
"invalid, it returns the ``name`` value of the item and an error message. "
"For example:"
msgstr ""

#: of pywebio.input.input_group:13
msgid ""
"def check_form(data):\n"
"    if len(data['name']) > 6:\n"
"        return ('name', 'Name to long!')\n"
"    if data['age'] <= 0:\n"
"        return ('age', 'Age cannot be negative!')\n"
"\n"
"data = input_group(\"Basic info\",[\n"
"    input('Input your name', name='name'),\n"
"    input('Repeat your age', name='age', type=NUMBER)\n"
"], validate=check_form)\n"
"\n"
"put_text(data['name'], data['age'])"
msgstr ""

#: of pywebio.input.input_group:30
msgid ""
"Whether the form can be cancelled. Default is ``False``. If "
"``cancelable=True``, a \"Cancel\" button will be displayed at the bottom "
"of the form.  Note: If the last input item in the group is `actions()`, "
"``cancelable`` will be ignored."
msgstr ""

#: of pywebio.input.input_group:30
msgid ""
"Whether the form can be cancelled. Default is ``False``. If "
"``cancelable=True``, a \"Cancel\" button will be displayed at the bottom "
"of the form."
msgstr ""

#: of pywebio.input.input_group:33
msgid ""
"Note: If the last input item in the group is `actions()`, ``cancelable`` "
"will be ignored."
msgstr ""

#: of pywebio.input.input_group:35
msgid ""
"If the user cancels the form, return ``None``, otherwise a ``dict`` is "
"returned, whose key is the ``name`` of the input item, and whose value is"
" the value of the input item."
msgstr ""

#: of pywebio.input.input_update:1
msgid ""
"Update attributes of input field. This function can only be called in "
"``onchange`` callback of input functions."
msgstr ""

#: of pywebio.input.input_update:4
msgid ""
"The ``name`` of the target input item. Optional, default is the name of "
"input field which triggers ``onchange``"
msgstr ""

#: of pywebio.input.input_update:6
msgid ""
"The input parameters need to be updated. Note that those parameters can "
"not be updated: ``type``, ``name``, ``validate``, ``action``, ``code``, "
"``onchange``, ``multiple``"
msgstr ""

#: of pywebio.input.input_update:10
msgid "An example of implementing dependent input items in an input group:"
msgstr ""

#: of pywebio.input.input_update:12
msgid ""
"country2city = {\n"
"    'China': ['Beijing', 'Shanghai', 'Hong Kong'],\n"
"    'USA': ['New York', 'Los Angeles', 'San Francisco'],\n"
"}\n"
"countries = list(country2city.keys())\n"
"location = input_group(\"Select a location\", [\n"
"    select('Country', options=countries, name='country',\n"
"           onchange=lambda c: input_update('city', "
"options=country2city[c])),\n"
"    select('City', options=country2city[countries[0]], name='city'),\n"
"])\n"
"put_text(location)  # ..demo-only"
msgstr ""

